// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package codegen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OomDClient is the client API for OomD service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OomDClient interface {
	OnlineGet(ctx context.Context, in *OnlineGetRequest, opts ...grpc.CallOption) (*OnlineGetResponse, error)
	OnlineMultiGet(ctx context.Context, in *OnlineMultiGetRequest, opts ...grpc.CallOption) (*OnlineMultiGetResponse, error)
	Sync(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*SyncResponse, error)
	Import(ctx context.Context, opts ...grpc.CallOption) (OomD_ImportClient, error)
	ImportByFile(ctx context.Context, in *ImportByFileRequest, opts ...grpc.CallOption) (*ImportResponse, error)
	Join(ctx context.Context, opts ...grpc.CallOption) (OomD_JoinClient, error)
	JoinByFile(ctx context.Context, in *JoinByFileRequest, opts ...grpc.CallOption) (*JoinByFileResponse, error)
	Export(ctx context.Context, in *ExportRequest, opts ...grpc.CallOption) (OomD_ExportClient, error)
	ExportByFile(ctx context.Context, in *ExportByFileRequest, opts ...grpc.CallOption) (*ExportByFileResponse, error)
}

type oomDClient struct {
	cc grpc.ClientConnInterface
}

func NewOomDClient(cc grpc.ClientConnInterface) OomDClient {
	return &oomDClient{cc}
}

func (c *oomDClient) OnlineGet(ctx context.Context, in *OnlineGetRequest, opts ...grpc.CallOption) (*OnlineGetResponse, error) {
	out := new(OnlineGetResponse)
	err := c.cc.Invoke(ctx, "/oomd.OomD/OnlineGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oomDClient) OnlineMultiGet(ctx context.Context, in *OnlineMultiGetRequest, opts ...grpc.CallOption) (*OnlineMultiGetResponse, error) {
	out := new(OnlineMultiGetResponse)
	err := c.cc.Invoke(ctx, "/oomd.OomD/OnlineMultiGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oomDClient) Sync(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*SyncResponse, error) {
	out := new(SyncResponse)
	err := c.cc.Invoke(ctx, "/oomd.OomD/Sync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oomDClient) Import(ctx context.Context, opts ...grpc.CallOption) (OomD_ImportClient, error) {
	stream, err := c.cc.NewStream(ctx, &OomD_ServiceDesc.Streams[0], "/oomd.OomD/Import", opts...)
	if err != nil {
		return nil, err
	}
	x := &oomDImportClient{stream}
	return x, nil
}

type OomD_ImportClient interface {
	Send(*ImportRequest) error
	CloseAndRecv() (*ImportResponse, error)
	grpc.ClientStream
}

type oomDImportClient struct {
	grpc.ClientStream
}

func (x *oomDImportClient) Send(m *ImportRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *oomDImportClient) CloseAndRecv() (*ImportResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ImportResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *oomDClient) ImportByFile(ctx context.Context, in *ImportByFileRequest, opts ...grpc.CallOption) (*ImportResponse, error) {
	out := new(ImportResponse)
	err := c.cc.Invoke(ctx, "/oomd.OomD/ImportByFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oomDClient) Join(ctx context.Context, opts ...grpc.CallOption) (OomD_JoinClient, error) {
	stream, err := c.cc.NewStream(ctx, &OomD_ServiceDesc.Streams[1], "/oomd.OomD/Join", opts...)
	if err != nil {
		return nil, err
	}
	x := &oomDJoinClient{stream}
	return x, nil
}

type OomD_JoinClient interface {
	Send(*JoinRequest) error
	Recv() (*JoinResponse, error)
	grpc.ClientStream
}

type oomDJoinClient struct {
	grpc.ClientStream
}

func (x *oomDJoinClient) Send(m *JoinRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *oomDJoinClient) Recv() (*JoinResponse, error) {
	m := new(JoinResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *oomDClient) JoinByFile(ctx context.Context, in *JoinByFileRequest, opts ...grpc.CallOption) (*JoinByFileResponse, error) {
	out := new(JoinByFileResponse)
	err := c.cc.Invoke(ctx, "/oomd.OomD/JoinByFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oomDClient) Export(ctx context.Context, in *ExportRequest, opts ...grpc.CallOption) (OomD_ExportClient, error) {
	stream, err := c.cc.NewStream(ctx, &OomD_ServiceDesc.Streams[2], "/oomd.OomD/Export", opts...)
	if err != nil {
		return nil, err
	}
	x := &oomDExportClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OomD_ExportClient interface {
	Recv() (*ExportResponse, error)
	grpc.ClientStream
}

type oomDExportClient struct {
	grpc.ClientStream
}

func (x *oomDExportClient) Recv() (*ExportResponse, error) {
	m := new(ExportResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *oomDClient) ExportByFile(ctx context.Context, in *ExportByFileRequest, opts ...grpc.CallOption) (*ExportByFileResponse, error) {
	out := new(ExportByFileResponse)
	err := c.cc.Invoke(ctx, "/oomd.OomD/ExportByFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OomDServer is the server API for OomD service.
// All implementations must embed UnimplementedOomDServer
// for forward compatibility
type OomDServer interface {
	OnlineGet(context.Context, *OnlineGetRequest) (*OnlineGetResponse, error)
	OnlineMultiGet(context.Context, *OnlineMultiGetRequest) (*OnlineMultiGetResponse, error)
	Sync(context.Context, *SyncRequest) (*SyncResponse, error)
	Import(OomD_ImportServer) error
	ImportByFile(context.Context, *ImportByFileRequest) (*ImportResponse, error)
	Join(OomD_JoinServer) error
	JoinByFile(context.Context, *JoinByFileRequest) (*JoinByFileResponse, error)
	Export(*ExportRequest, OomD_ExportServer) error
	ExportByFile(context.Context, *ExportByFileRequest) (*ExportByFileResponse, error)
	mustEmbedUnimplementedOomDServer()
}

// UnimplementedOomDServer must be embedded to have forward compatible implementations.
type UnimplementedOomDServer struct {
}

func (UnimplementedOomDServer) OnlineGet(context.Context, *OnlineGetRequest) (*OnlineGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnlineGet not implemented")
}
func (UnimplementedOomDServer) OnlineMultiGet(context.Context, *OnlineMultiGetRequest) (*OnlineMultiGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnlineMultiGet not implemented")
}
func (UnimplementedOomDServer) Sync(context.Context, *SyncRequest) (*SyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sync not implemented")
}
func (UnimplementedOomDServer) Import(OomD_ImportServer) error {
	return status.Errorf(codes.Unimplemented, "method Import not implemented")
}
func (UnimplementedOomDServer) ImportByFile(context.Context, *ImportByFileRequest) (*ImportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ImportByFile not implemented")
}
func (UnimplementedOomDServer) Join(OomD_JoinServer) error {
	return status.Errorf(codes.Unimplemented, "method Join not implemented")
}
func (UnimplementedOomDServer) JoinByFile(context.Context, *JoinByFileRequest) (*JoinByFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinByFile not implemented")
}
func (UnimplementedOomDServer) Export(*ExportRequest, OomD_ExportServer) error {
	return status.Errorf(codes.Unimplemented, "method Export not implemented")
}
func (UnimplementedOomDServer) ExportByFile(context.Context, *ExportByFileRequest) (*ExportByFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportByFile not implemented")
}
func (UnimplementedOomDServer) mustEmbedUnimplementedOomDServer() {}

// UnsafeOomDServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OomDServer will
// result in compilation errors.
type UnsafeOomDServer interface {
	mustEmbedUnimplementedOomDServer()
}

func RegisterOomDServer(s grpc.ServiceRegistrar, srv OomDServer) {
	s.RegisterService(&OomD_ServiceDesc, srv)
}

func _OomD_OnlineGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnlineGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OomDServer).OnlineGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oomd.OomD/OnlineGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OomDServer).OnlineGet(ctx, req.(*OnlineGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OomD_OnlineMultiGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnlineMultiGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OomDServer).OnlineMultiGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oomd.OomD/OnlineMultiGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OomDServer).OnlineMultiGet(ctx, req.(*OnlineMultiGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OomD_Sync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OomDServer).Sync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oomd.OomD/Sync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OomDServer).Sync(ctx, req.(*SyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OomD_Import_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OomDServer).Import(&oomDImportServer{stream})
}

type OomD_ImportServer interface {
	SendAndClose(*ImportResponse) error
	Recv() (*ImportRequest, error)
	grpc.ServerStream
}

type oomDImportServer struct {
	grpc.ServerStream
}

func (x *oomDImportServer) SendAndClose(m *ImportResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *oomDImportServer) Recv() (*ImportRequest, error) {
	m := new(ImportRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _OomD_ImportByFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportByFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OomDServer).ImportByFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oomd.OomD/ImportByFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OomDServer).ImportByFile(ctx, req.(*ImportByFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OomD_Join_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OomDServer).Join(&oomDJoinServer{stream})
}

type OomD_JoinServer interface {
	Send(*JoinResponse) error
	Recv() (*JoinRequest, error)
	grpc.ServerStream
}

type oomDJoinServer struct {
	grpc.ServerStream
}

func (x *oomDJoinServer) Send(m *JoinResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *oomDJoinServer) Recv() (*JoinRequest, error) {
	m := new(JoinRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _OomD_JoinByFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinByFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OomDServer).JoinByFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oomd.OomD/JoinByFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OomDServer).JoinByFile(ctx, req.(*JoinByFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OomD_Export_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ExportRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OomDServer).Export(m, &oomDExportServer{stream})
}

type OomD_ExportServer interface {
	Send(*ExportResponse) error
	grpc.ServerStream
}

type oomDExportServer struct {
	grpc.ServerStream
}

func (x *oomDExportServer) Send(m *ExportResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _OomD_ExportByFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportByFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OomDServer).ExportByFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oomd.OomD/ExportByFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OomDServer).ExportByFile(ctx, req.(*ExportByFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OomD_ServiceDesc is the grpc.ServiceDesc for OomD service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OomD_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "oomd.OomD",
	HandlerType: (*OomDServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OnlineGet",
			Handler:    _OomD_OnlineGet_Handler,
		},
		{
			MethodName: "OnlineMultiGet",
			Handler:    _OomD_OnlineMultiGet_Handler,
		},
		{
			MethodName: "Sync",
			Handler:    _OomD_Sync_Handler,
		},
		{
			MethodName: "ImportByFile",
			Handler:    _OomD_ImportByFile_Handler,
		},
		{
			MethodName: "JoinByFile",
			Handler:    _OomD_JoinByFile_Handler,
		},
		{
			MethodName: "ExportByFile",
			Handler:    _OomD_ExportByFile_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Import",
			Handler:       _OomD_Import_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Join",
			Handler:       _OomD_Join_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Export",
			Handler:       _OomD_Export_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "oomd.proto",
}
