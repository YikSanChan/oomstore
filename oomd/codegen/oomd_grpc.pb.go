// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package codegen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OomDClient is the client API for OomD service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OomDClient interface {
	OnlineGet(ctx context.Context, in *OnlineGetRequest, opts ...grpc.CallOption) (*OnlineGetResponse, error)
	OnlineMultiGet(ctx context.Context, in *OnlineMultiGetRequest, opts ...grpc.CallOption) (*OnlineMultiGetResponse, error)
	Sync(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*SyncResponse, error)
	ChannelImport(ctx context.Context, opts ...grpc.CallOption) (OomD_ChannelImportClient, error)
	Import(ctx context.Context, in *ImportRequest, opts ...grpc.CallOption) (*ImportResponse, error)
	ChannelJoin(ctx context.Context, opts ...grpc.CallOption) (OomD_ChannelJoinClient, error)
	Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error)
	ChannelExport(ctx context.Context, in *ChannelExportRequest, opts ...grpc.CallOption) (OomD_ChannelExportClient, error)
	Export(ctx context.Context, in *ExportRequest, opts ...grpc.CallOption) (*ExportResponse, error)
}

type oomDClient struct {
	cc grpc.ClientConnInterface
}

func NewOomDClient(cc grpc.ClientConnInterface) OomDClient {
	return &oomDClient{cc}
}

func (c *oomDClient) OnlineGet(ctx context.Context, in *OnlineGetRequest, opts ...grpc.CallOption) (*OnlineGetResponse, error) {
	out := new(OnlineGetResponse)
	err := c.cc.Invoke(ctx, "/oomd.OomD/OnlineGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oomDClient) OnlineMultiGet(ctx context.Context, in *OnlineMultiGetRequest, opts ...grpc.CallOption) (*OnlineMultiGetResponse, error) {
	out := new(OnlineMultiGetResponse)
	err := c.cc.Invoke(ctx, "/oomd.OomD/OnlineMultiGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oomDClient) Sync(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*SyncResponse, error) {
	out := new(SyncResponse)
	err := c.cc.Invoke(ctx, "/oomd.OomD/Sync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oomDClient) ChannelImport(ctx context.Context, opts ...grpc.CallOption) (OomD_ChannelImportClient, error) {
	stream, err := c.cc.NewStream(ctx, &OomD_ServiceDesc.Streams[0], "/oomd.OomD/ChannelImport", opts...)
	if err != nil {
		return nil, err
	}
	x := &oomDChannelImportClient{stream}
	return x, nil
}

type OomD_ChannelImportClient interface {
	Send(*ChannelImportRequest) error
	CloseAndRecv() (*ImportResponse, error)
	grpc.ClientStream
}

type oomDChannelImportClient struct {
	grpc.ClientStream
}

func (x *oomDChannelImportClient) Send(m *ChannelImportRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *oomDChannelImportClient) CloseAndRecv() (*ImportResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ImportResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *oomDClient) Import(ctx context.Context, in *ImportRequest, opts ...grpc.CallOption) (*ImportResponse, error) {
	out := new(ImportResponse)
	err := c.cc.Invoke(ctx, "/oomd.OomD/Import", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oomDClient) ChannelJoin(ctx context.Context, opts ...grpc.CallOption) (OomD_ChannelJoinClient, error) {
	stream, err := c.cc.NewStream(ctx, &OomD_ServiceDesc.Streams[1], "/oomd.OomD/ChannelJoin", opts...)
	if err != nil {
		return nil, err
	}
	x := &oomDChannelJoinClient{stream}
	return x, nil
}

type OomD_ChannelJoinClient interface {
	Send(*ChannelJoinRequest) error
	Recv() (*ChannelJoinResponse, error)
	grpc.ClientStream
}

type oomDChannelJoinClient struct {
	grpc.ClientStream
}

func (x *oomDChannelJoinClient) Send(m *ChannelJoinRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *oomDChannelJoinClient) Recv() (*ChannelJoinResponse, error) {
	m := new(ChannelJoinResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *oomDClient) Join(ctx context.Context, in *JoinRequest, opts ...grpc.CallOption) (*JoinResponse, error) {
	out := new(JoinResponse)
	err := c.cc.Invoke(ctx, "/oomd.OomD/Join", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oomDClient) ChannelExport(ctx context.Context, in *ChannelExportRequest, opts ...grpc.CallOption) (OomD_ChannelExportClient, error) {
	stream, err := c.cc.NewStream(ctx, &OomD_ServiceDesc.Streams[2], "/oomd.OomD/ChannelExport", opts...)
	if err != nil {
		return nil, err
	}
	x := &oomDChannelExportClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OomD_ChannelExportClient interface {
	Recv() (*ChannelExportResponse, error)
	grpc.ClientStream
}

type oomDChannelExportClient struct {
	grpc.ClientStream
}

func (x *oomDChannelExportClient) Recv() (*ChannelExportResponse, error) {
	m := new(ChannelExportResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *oomDClient) Export(ctx context.Context, in *ExportRequest, opts ...grpc.CallOption) (*ExportResponse, error) {
	out := new(ExportResponse)
	err := c.cc.Invoke(ctx, "/oomd.OomD/Export", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OomDServer is the server API for OomD service.
// All implementations must embed UnimplementedOomDServer
// for forward compatibility
type OomDServer interface {
	OnlineGet(context.Context, *OnlineGetRequest) (*OnlineGetResponse, error)
	OnlineMultiGet(context.Context, *OnlineMultiGetRequest) (*OnlineMultiGetResponse, error)
	Sync(context.Context, *SyncRequest) (*SyncResponse, error)
	ChannelImport(OomD_ChannelImportServer) error
	Import(context.Context, *ImportRequest) (*ImportResponse, error)
	ChannelJoin(OomD_ChannelJoinServer) error
	Join(context.Context, *JoinRequest) (*JoinResponse, error)
	ChannelExport(*ChannelExportRequest, OomD_ChannelExportServer) error
	Export(context.Context, *ExportRequest) (*ExportResponse, error)
	mustEmbedUnimplementedOomDServer()
}

// UnimplementedOomDServer must be embedded to have forward compatible implementations.
type UnimplementedOomDServer struct {
}

func (UnimplementedOomDServer) OnlineGet(context.Context, *OnlineGetRequest) (*OnlineGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnlineGet not implemented")
}
func (UnimplementedOomDServer) OnlineMultiGet(context.Context, *OnlineMultiGetRequest) (*OnlineMultiGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OnlineMultiGet not implemented")
}
func (UnimplementedOomDServer) Sync(context.Context, *SyncRequest) (*SyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sync not implemented")
}
func (UnimplementedOomDServer) ChannelImport(OomD_ChannelImportServer) error {
	return status.Errorf(codes.Unimplemented, "method ChannelImport not implemented")
}
func (UnimplementedOomDServer) Import(context.Context, *ImportRequest) (*ImportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Import not implemented")
}
func (UnimplementedOomDServer) ChannelJoin(OomD_ChannelJoinServer) error {
	return status.Errorf(codes.Unimplemented, "method ChannelJoin not implemented")
}
func (UnimplementedOomDServer) Join(context.Context, *JoinRequest) (*JoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Join not implemented")
}
func (UnimplementedOomDServer) ChannelExport(*ChannelExportRequest, OomD_ChannelExportServer) error {
	return status.Errorf(codes.Unimplemented, "method ChannelExport not implemented")
}
func (UnimplementedOomDServer) Export(context.Context, *ExportRequest) (*ExportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Export not implemented")
}
func (UnimplementedOomDServer) mustEmbedUnimplementedOomDServer() {}

// UnsafeOomDServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OomDServer will
// result in compilation errors.
type UnsafeOomDServer interface {
	mustEmbedUnimplementedOomDServer()
}

func RegisterOomDServer(s grpc.ServiceRegistrar, srv OomDServer) {
	s.RegisterService(&OomD_ServiceDesc, srv)
}

func _OomD_OnlineGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnlineGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OomDServer).OnlineGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oomd.OomD/OnlineGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OomDServer).OnlineGet(ctx, req.(*OnlineGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OomD_OnlineMultiGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OnlineMultiGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OomDServer).OnlineMultiGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oomd.OomD/OnlineMultiGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OomDServer).OnlineMultiGet(ctx, req.(*OnlineMultiGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OomD_Sync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OomDServer).Sync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oomd.OomD/Sync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OomDServer).Sync(ctx, req.(*SyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OomD_ChannelImport_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OomDServer).ChannelImport(&oomDChannelImportServer{stream})
}

type OomD_ChannelImportServer interface {
	SendAndClose(*ImportResponse) error
	Recv() (*ChannelImportRequest, error)
	grpc.ServerStream
}

type oomDChannelImportServer struct {
	grpc.ServerStream
}

func (x *oomDChannelImportServer) SendAndClose(m *ImportResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *oomDChannelImportServer) Recv() (*ChannelImportRequest, error) {
	m := new(ChannelImportRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _OomD_Import_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OomDServer).Import(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oomd.OomD/Import",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OomDServer).Import(ctx, req.(*ImportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OomD_ChannelJoin_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OomDServer).ChannelJoin(&oomDChannelJoinServer{stream})
}

type OomD_ChannelJoinServer interface {
	Send(*ChannelJoinResponse) error
	Recv() (*ChannelJoinRequest, error)
	grpc.ServerStream
}

type oomDChannelJoinServer struct {
	grpc.ServerStream
}

func (x *oomDChannelJoinServer) Send(m *ChannelJoinResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *oomDChannelJoinServer) Recv() (*ChannelJoinRequest, error) {
	m := new(ChannelJoinRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _OomD_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OomDServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oomd.OomD/Join",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OomDServer).Join(ctx, req.(*JoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OomD_ChannelExport_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ChannelExportRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OomDServer).ChannelExport(m, &oomDChannelExportServer{stream})
}

type OomD_ChannelExportServer interface {
	Send(*ChannelExportResponse) error
	grpc.ServerStream
}

type oomDChannelExportServer struct {
	grpc.ServerStream
}

func (x *oomDChannelExportServer) Send(m *ChannelExportResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _OomD_Export_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OomDServer).Export(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/oomd.OomD/Export",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OomDServer).Export(ctx, req.(*ExportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OomD_ServiceDesc is the grpc.ServiceDesc for OomD service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OomD_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "oomd.OomD",
	HandlerType: (*OomDServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OnlineGet",
			Handler:    _OomD_OnlineGet_Handler,
		},
		{
			MethodName: "OnlineMultiGet",
			Handler:    _OomD_OnlineMultiGet_Handler,
		},
		{
			MethodName: "Sync",
			Handler:    _OomD_Sync_Handler,
		},
		{
			MethodName: "Import",
			Handler:    _OomD_Import_Handler,
		},
		{
			MethodName: "Join",
			Handler:    _OomD_Join_Handler,
		},
		{
			MethodName: "Export",
			Handler:    _OomD_Export_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ChannelImport",
			Handler:       _OomD_ChannelImport_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ChannelJoin",
			Handler:       _OomD_ChannelJoin_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ChannelExport",
			Handler:       _OomD_ChannelExport_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "oomd.proto",
}
